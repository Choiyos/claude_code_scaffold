'use client';\n\nimport { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { OnboardingWizard } from '@/components/onboarding-wizard';\nimport { WelcomeScreen } from '@/components/welcome-screen';\nimport { ProgressTracker } from '@/components/progress-tracker';\nimport { CompletionCelebration } from '@/components/completion-celebration';\nimport { TutorialMode } from '@/components/tutorial-mode';\nimport { OnboardingProvider } from '@/lib/onboarding-context';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Rocket,\n  BookOpen,\n  Play,\n  Settings,\n  HelpCircle,\n  ArrowRight,\n  CheckCircle,\n  Clock,\n  Users,\n  Zap\n} from 'lucide-react';\n\ntype OnboardingFlow = 'welcome' | 'setup' | 'tutorial' | 'completed';\n\nconst onboardingPaths = [\n  {\n    id: 'quick-start',\n    title: 'Quick Start',\n    description: 'Get up and running in 5 minutes',\n    duration: '5 min',\n    difficulty: 'Beginner',\n    icon: Zap,\n    color: 'bg-green-500',\n    features: ['Basic setup', 'First sync', 'Essential commands']\n  },\n  {\n    id: 'comprehensive',\n    title: 'Comprehensive Setup',\n    description: 'Complete configuration for team collaboration',\n    duration: '15 min',\n    difficulty: 'Intermediate',\n    icon: Settings,\n    color: 'bg-blue-500',\n    features: ['Team configuration', 'MCP servers', 'Advanced workflows', 'Security setup']\n  },\n  {\n    id: 'guided-tutorial',\n    title: 'Guided Tutorial',\n    description: 'Learn through interactive tutorials',\n    duration: '20 min',\n    difficulty: 'All levels',\n    icon: BookOpen,\n    color: 'bg-purple-500',\n    features: ['Interactive lessons', 'Hands-on practice', 'Best practices', 'Troubleshooting']\n  },\n  {\n    id: 'team-onboarding',\n    title: 'Team Onboarding',\n    description: 'Set up environments for your entire team',\n    duration: '25 min',\n    difficulty: 'Advanced',\n    icon: Users,\n    color: 'bg-orange-500',\n    features: ['Multi-user setup', 'Role-based access', 'Team templates', 'Collaboration tools']\n  }\n];\n\nexport default function OnboardingPage() {\n  const [currentFlow, setCurrentFlow] = useState<OnboardingFlow>('welcome');\n  const [selectedPath, setSelectedPath] = useState<string | null>(null);\n  const [progress, setProgress] = useState(0);\n  const [completedSteps, setCompletedSteps] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Check if user has completed onboarding before\n  useEffect(() => {\n    const hasCompletedOnboarding = localStorage.getItem('claude-env-onboarding-completed');\n    const savedProgress = localStorage.getItem('claude-env-onboarding-progress');\n    \n    if (hasCompletedOnboarding === 'true') {\n      setCurrentFlow('completed');\n    } else if (savedProgress) {\n      const progressData = JSON.parse(savedProgress);\n      setProgress(progressData.progress || 0);\n      setCompletedSteps(progressData.completedSteps || []);\n      setSelectedPath(progressData.selectedPath || null);\n      if (progressData.selectedPath) {\n        setCurrentFlow('setup');\n      }\n    }\n  }, []);\n\n  const handlePathSelection = (pathId: string) => {\n    setSelectedPath(pathId);\n    setCurrentFlow('setup');\n    setIsLoading(true);\n    \n    // Save progress\n    localStorage.setItem('claude-env-onboarding-progress', JSON.stringify({\n      selectedPath: pathId,\n      progress: 0,\n      completedSteps: []\n    }));\n    \n    // Simulate loading\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 1500);\n  };\n\n  const handleStepCompletion = (stepId: string, progressIncrement: number) => {\n    const newCompletedSteps = [...completedSteps, stepId];\n    const newProgress = Math.min(progress + progressIncrement, 100);\n    \n    setCompletedSteps(newCompletedSteps);\n    setProgress(newProgress);\n    \n    // Save progress\n    localStorage.setItem('claude-env-onboarding-progress', JSON.stringify({\n      selectedPath,\n      progress: newProgress,\n      completedSteps: newCompletedSteps\n    }));\n    \n    // Check if onboarding is complete\n    if (newProgress >= 100) {\n      setTimeout(() => {\n        setCurrentFlow('completed');\n        localStorage.setItem('claude-env-onboarding-completed', 'true');\n        localStorage.removeItem('claude-env-onboarding-progress');\n      }, 1000);\n    }\n  };\n\n  const handleTutorialMode = () => {\n    setCurrentFlow('tutorial');\n  };\n\n  const handleRestart = () => {\n    setCurrentFlow('welcome');\n    setSelectedPath(null);\n    setProgress(0);\n    setCompletedSteps([]);\n    localStorage.removeItem('claude-env-onboarding-completed');\n    localStorage.removeItem('claude-env-onboarding-progress');\n  };\n\n  const selectedPathData = onboardingPaths.find(path => path.id === selectedPath);\n\n  return (\n    <OnboardingProvider>\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-purple-50 dark:from-slate-900 dark:via-blue-900 dark:to-purple-900\">\n        <div className=\"container mx-auto px-4 py-8\">\n          {/* Progress Tracker - Show when in setup or tutorial mode */}\n          <AnimatePresence>\n            {(currentFlow === 'setup' || currentFlow === 'tutorial') && (\n              <motion.div\n                initial={{ opacity: 0, y: -20 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -20 }}\n                className=\"mb-8\"\n              >\n                <ProgressTracker\n                  progress={progress}\n                  currentStep={completedSteps.length + 1}\n                  totalSteps={selectedPathData ? 5 : 4}\n                  pathTitle={selectedPathData?.title || 'Tutorial'}\n                />\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          {/* Main Content */}\n          <AnimatePresence mode=\"wait\">\n            {currentFlow === 'welcome' && (\n              <motion.div\n                key=\"welcome\"\n                initial={{ opacity: 0, scale: 0.95 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.95 }}\n                transition={{ duration: 0.3 }}\n                className=\"max-w-6xl mx-auto\"\n              >\n                <WelcomeScreen\n                  onGetStarted={() => setCurrentFlow('setup')}\n                  onTutorial={handleTutorialMode}\n                />\n                \n                {/* Onboarding Path Selection */}\n                <div className=\"mt-12\">\n                  <div className=\"text-center mb-8\">\n                    <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-4\">\n                      Choose Your Learning Path\n                    </h2>\n                    <p className=\"text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto\">\n                      Select the onboarding experience that best fits your needs and skill level\n                    </p>\n                  </div>\n                  \n                  <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                    {onboardingPaths.map((path, index) => {\n                      const IconComponent = path.icon;\n                      return (\n                        <motion.div\n                          key={path.id}\n                          initial={{ opacity: 0, y: 20 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ delay: index * 0.1 }}\n                        >\n                          <Card className=\"p-6 h-full hover:shadow-lg transition-all duration-200 cursor-pointer group hover:-translate-y-1\"\n                                onClick={() => handlePathSelection(path.id)}>\n                            <div className=\"flex flex-col h-full\">\n                              <div className=\"flex items-center gap-3 mb-4\">\n                                <div className={`p-2 rounded-lg ${path.color} text-white group-hover:scale-110 transition-transform`}>\n                                  <IconComponent className=\"h-5 w-5\" />\n                                </div>\n                                <div>\n                                  <h3 className=\"font-semibold text-gray-900 dark:text-white\">\n                                    {path.title}\n                                  </h3>\n                                  <div className=\"flex gap-2 mt-1\">\n                                    <Badge variant=\"secondary\" className=\"text-xs\">\n                                      {path.duration}\n                                    </Badge>\n                                    <Badge variant=\"outline\" className=\"text-xs\">\n                                      {path.difficulty}\n                                    </Badge>\n                                  </div>\n                                </div>\n                              </div>\n                              \n                              <p className=\"text-gray-600 dark:text-gray-300 text-sm mb-4 flex-1\">\n                                {path.description}\n                              </p>\n                              \n                              <div className=\"space-y-2\">\n                                <div className=\"text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide\">\n                                  Includes:\n                                </div>\n                                <ul className=\"space-y-1\">\n                                  {path.features.map((feature, idx) => (\n                                    <li key={idx} className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-300\">\n                                      <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                                      {feature}\n                                    </li>\n                                  ))}\n                                </ul>\n                              </div>\n                              \n                              <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                                <Button className=\"w-full group-hover:bg-primary/90\" size=\"sm\">\n                                  Start Journey\n                                  <ArrowRight className=\"ml-2 h-4 w-4 group-hover:translate-x-1 transition-transform\" />\n                                </Button>\n                              </div>\n                            </div>\n                          </Card>\n                        </motion.div>\n                      );\n                    })}\n                  </div>\n                </div>\n              </motion.div>\n            )}\n\n            {currentFlow === 'setup' && selectedPath && (\n              <motion.div\n                key=\"setup\"\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: -20 }}\n                transition={{ duration: 0.3 }}\n              >\n                {isLoading ? (\n                  <div className=\"flex items-center justify-center min-h-[400px]\">\n                    <div className=\"text-center\">\n                      <motion.div\n                        animate={{ rotate: 360 }}\n                        transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                        className=\"w-12 h-12 border-4 border-primary/20 border-t-primary rounded-full mx-auto mb-4\"\n                      />\n                      <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n                        Preparing Your {selectedPathData?.title} Experience\n                      </h3>\n                      <p className=\"text-gray-600 dark:text-gray-300\">\n                        Setting up interactive guides and checking system requirements...\n                      </p>\n                    </div>\n                  </div>\n                ) : (\n                  <OnboardingWizard\n                    pathId={selectedPath}\n                    onStepComplete={handleStepCompletion}\n                    onComplete={() => setCurrentFlow('completed')}\n                    onBack={handleRestart}\n                    completedSteps={completedSteps}\n                    progress={progress}\n                  />\n                )}\n              </motion.div>\n            )}\n\n            {currentFlow === 'tutorial' && (\n              <motion.div\n                key=\"tutorial\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -20 }}\n                transition={{ duration: 0.3 }}\n              >\n                <TutorialMode\n                  onComplete={() => setCurrentFlow('completed')}\n                  onBack={handleRestart}\n                />\n              </motion.div>\n            )}\n\n            {currentFlow === 'completed' && (\n              <motion.div\n                key=\"completed\"\n                initial={{ opacity: 0, scale: 0.9 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.9 }}\n                transition={{ duration: 0.3 }}\n              >\n                <CompletionCelebration\n                  pathTitle={selectedPathData?.title || 'Claude Environment'}\n                  onRestart={handleRestart}\n                  onOpenDashboard={() => window.open('http://localhost:3000', '_blank')}\n                />\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n    </OnboardingProvider>\n  );\n}"