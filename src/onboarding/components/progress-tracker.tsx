'use client';\n\nimport { motion } from 'framer-motion';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { CheckCircle, Circle, ArrowRight } from 'lucide-react';\n\ninterface ProgressTrackerProps {\n  progress: number;\n  currentStep: number;\n  totalSteps: number;\n  pathTitle: string;\n}\n\nconst stepLabels = [\n  'System Check',\n  'Environment Setup',\n  'Configuration',\n  'Integration',\n  'Validation'\n];\n\nexport function ProgressTracker({ \n  progress, \n  currentStep, \n  totalSteps, \n  pathTitle \n}: ProgressTrackerProps) {\n  return (\n    <Card className=\"p-6 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 border-0 shadow-lg\">\n      <div className=\"flex flex-col lg:flex-row lg:items-center gap-6\">\n        {/* Progress Info */}\n        <div className=\"flex-1\">\n          <div className=\"flex items-center gap-3 mb-2\">\n            <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n              {pathTitle} Setup\n            </h2>\n            <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300\">\n              Step {currentStep} of {totalSteps}\n            </Badge>\n          </div>\n          \n          <div className=\"flex items-center gap-4 mb-4\">\n            <div className=\"flex-1\">\n              <Progress \n                value={progress} \n                className=\"h-2\"\n              />\n            </div>\n            <span className=\"text-sm font-medium text-gray-600 dark:text-gray-300 min-w-[3rem]\">\n              {Math.round(progress)}%\n            </span>\n          </div>\n          \n          <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n            We'll guide you through each step to get your Claude environment ready for development\n          </p>\n        </div>\n\n        {/* Step Indicators */}\n        <div className=\"flex items-center gap-2 overflow-x-auto pb-2 lg:pb-0\">\n          {stepLabels.slice(0, totalSteps).map((label, index) => {\n            const stepNumber = index + 1;\n            const isCompleted = stepNumber < currentStep;\n            const isCurrent = stepNumber === currentStep;\n            const isUpcoming = stepNumber > currentStep;\n            \n            return (\n              <div key={label} className=\"flex items-center gap-2 flex-shrink-0\">\n                <div className=\"flex flex-col items-center gap-1\">\n                  <motion.div\n                    initial={{ scale: 0.8, opacity: 0.5 }}\n                    animate={{ \n                      scale: isCurrent ? 1.2 : 1, \n                      opacity: isUpcoming ? 0.5 : 1 \n                    }}\n                    transition={{ duration: 0.3 }}\n                    className={`relative flex items-center justify-center w-8 h-8 rounded-full border-2 ${\n                      isCompleted \n                        ? 'bg-green-500 border-green-500 text-white' \n                        : isCurrent \n                        ? 'bg-blue-500 border-blue-500 text-white' \n                        : 'bg-gray-100 dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-400'\n                    }`}\n                  >\n                    {isCompleted ? (\n                      <CheckCircle className=\"w-4 h-4\" />\n                    ) : (\n                      <span className=\"text-xs font-semibold\">{stepNumber}</span>\n                    )}\n                    \n                    {isCurrent && (\n                      <motion.div\n                        className=\"absolute inset-0 rounded-full border-2 border-blue-300\"\n                        animate={{ scale: [1, 1.3, 1] }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      />\n                    )}\n                  </motion.div>\n                  \n                  <span className={`text-xs font-medium text-center min-w-[4rem] ${\n                    isCompleted || isCurrent \n                      ? 'text-gray-900 dark:text-white' \n                      : 'text-gray-500 dark:text-gray-400'\n                  }`}>\n                    {label}\n                  </span>\n                </div>\n                \n                {index < totalSteps - 1 && (\n                  <ArrowRight className={`w-4 h-4 ${\n                    isCompleted \n                      ? 'text-green-500' \n                      : isCurrent && index === currentStep - 1\n                      ? 'text-blue-500'\n                      : 'text-gray-300 dark:text-gray-600'\n                  }`} />\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      \n      {/* Time Estimate */}\n      <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between text-sm\">\n          <span className=\"text-gray-600 dark:text-gray-300\">\n            Estimated time remaining: <span className=\"font-medium\">\n              {Math.max(0, Math.ceil((100 - progress) / 20))} minutes\n            </span>\n          </span>\n          \n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            className=\"flex items-center gap-1 text-green-600 dark:text-green-400\"\n          >\n            <motion.div\n              animate={{ scale: [1, 1.2, 1] }}\n              transition={{ duration: 1.5, repeat: Infinity }}\n              className=\"w-2 h-2 bg-green-500 rounded-full\"\n            />\n            <span className=\"font-medium\">In Progress</span>\n          </motion.div>\n        </div>\n      </div>\n    </Card>\n  );\n}"