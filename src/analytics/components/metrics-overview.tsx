'use client';\n\nimport { motion } from 'framer-motion';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  TrendingUp,\n  TrendingDown,\n  Minus,\n  Server,\n  Users,\n  Activity,\n  Zap,\n  CheckCircle,\n  AlertTriangle,\n  Clock,\n  Database,\n  GitBranch,\n  Terminal\n} from 'lucide-react';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell\n} from 'recharts';\n\ninterface MetricsOverviewProps {\n  metrics: any;\n  timeRange: string;\n  isLoading: boolean;\n}\n\n// Sample data - replace with real metrics\nconst sampleMetrics = {\n  totalEnvironments: 24,\n  activeUsers: 87,\n  syncOperations: 1247,\n  avgResponseTime: 145,\n  successRate: 98.7,\n  systemUptime: 99.94,\n  errorRate: 0.13,\n  totalRequests: 15678,\n  trends: {\n    environments: 8.5,\n    users: 12.3,\n    syncs: -2.1,\n    responseTime: -8.2\n  }\n};\n\nconst usageData = [\n  { name: '00:00', value: 45 },\n  { name: '04:00', value: 23 },\n  { name: '08:00', value: 78 },\n  { name: '12:00', value: 95 },\n  { name: '16:00', value: 88 },\n  { name: '20:00', value: 67 }\n];\n\nconst environmentDistribution = [\n  { name: 'Development', value: 45, color: '#3B82F6' },\n  { name: 'Staging', value: 30, color: '#10B981' },\n  { name: 'Production', value: 25, color: '#F59E0B' }\n];\n\nfunction MetricCard({ \n  title, \n  value, \n  unit = '', \n  trend, \n  icon: Icon, \n  color = 'blue',\n  isLoading = false\n}: {\n  title: string;\n  value: number | string;\n  unit?: string;\n  trend?: number;\n  icon: any;\n  color?: string;\n  isLoading?: boolean;\n}) {\n  const getTrendIcon = () => {\n    if (!trend) return <Minus className=\"h-3 w-3\" />;\n    if (trend > 0) return <TrendingUp className=\"h-3 w-3 text-green-600\" />;\n    return <TrendingDown className=\"h-3 w-3 text-red-600\" />;\n  };\n\n  const getTrendColor = () => {\n    if (!trend) return 'text-gray-500';\n    return trend > 0 ? 'text-green-600' : 'text-red-600';\n  };\n\n  const colorClasses = {\n    blue: 'from-blue-500 to-blue-600',\n    green: 'from-green-500 to-green-600',\n    orange: 'from-orange-500 to-orange-600',\n    purple: 'from-purple-500 to-purple-600',\n    red: 'from-red-500 to-red-600'\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"overflow-hidden\">\n        <CardContent className=\"p-6\">\n          <div className=\"space-y-4\">\n            <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n            <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n            <div className=\"h-4 w-20 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"overflow-hidden hover:shadow-lg transition-all duration-200 group\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400 mb-1\">\n              {title}\n            </p>\n            <div className=\"flex items-baseline gap-2\">\n              <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {typeof value === 'number' ? value.toLocaleString() : value}\n              </h3>\n              {unit && (\n                <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n                  {unit}\n                </span>\n              )}\n            </div>\n            \n            {trend !== undefined && (\n              <div className=\"flex items-center gap-1 mt-2\">\n                {getTrendIcon()}\n                <span className={`text-xs font-medium ${getTrendColor()}`}>\n                  {Math.abs(trend)}%\n                </span>\n                <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  vs last period\n                </span>\n              </div>\n            )}\n          </div>\n          \n          <div className={`p-3 rounded-xl bg-gradient-to-br ${colorClasses[color as keyof typeof colorClasses]} group-hover:scale-110 transition-transform duration-200`}>\n            <Icon className=\"h-6 w-6 text-white\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport function MetricsOverview({ metrics, timeRange, isLoading }: MetricsOverviewProps) {\n  const data = metrics || sampleMetrics;\n\n  const keyMetrics = [\n    {\n      title: 'Total Environments',\n      value: data.totalEnvironments,\n      trend: data.trends?.environments,\n      icon: Server,\n      color: 'blue'\n    },\n    {\n      title: 'Active Users',\n      value: data.activeUsers,\n      trend: data.trends?.users,\n      icon: Users,\n      color: 'green'\n    },\n    {\n      title: 'Sync Operations',\n      value: data.syncOperations,\n      trend: data.trends?.syncs,\n      icon: GitBranch,\n      color: 'purple'\n    },\n    {\n      title: 'Avg Response Time',\n      value: data.avgResponseTime,\n      unit: 'ms',\n      trend: data.trends?.responseTime,\n      icon: Zap,\n      color: 'orange'\n    },\n    {\n      title: 'Success Rate',\n      value: data.successRate,\n      unit: '%',\n      icon: CheckCircle,\n      color: 'green'\n    },\n    {\n      title: 'System Uptime',\n      value: data.systemUptime,\n      unit: '%',\n      icon: Activity,\n      color: 'blue'\n    },\n    {\n      title: 'Error Rate',\n      value: data.errorRate,\n      unit: '%',\n      icon: AlertTriangle,\n      color: 'red'\n    },\n    {\n      title: 'Total Requests',\n      value: data.totalRequests,\n      icon: Database,\n      color: 'purple'\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Key Metrics Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {keyMetrics.map((metric, index) => (\n          <motion.div\n            key={metric.title}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: index * 0.1 }}\n          >\n            <MetricCard\n              title={metric.title}\n              value={metric.value}\n              unit={metric.unit}\n              trend={metric.trend}\n              icon={metric.icon}\n              color={metric.color}\n              isLoading={isLoading}\n            />\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Charts Section */}\n      <div className=\"grid lg:grid-cols-2 gap-6\">\n        {/* Usage Trend */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.8 }}\n        >\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Activity className=\"h-5 w-5\" />\n                Usage Trend ({timeRange})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"h-64 bg-gray-100 dark:bg-gray-800 rounded animate-pulse\" />\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <AreaChart data={usageData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                    <XAxis \n                      dataKey=\"name\" \n                      className=\"text-muted-foreground\" \n                      fontSize={12}\n                    />\n                    <YAxis className=\"text-muted-foreground\" fontSize={12} />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: 'hsl(var(--card))',\n                        border: '1px solid hsl(var(--border))',\n                        borderRadius: '8px',\n                      }}\n                    />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"value\"\n                      stroke=\"hsl(var(--primary))\"\n                      fill=\"hsl(var(--primary) / 0.2)\"\n                      strokeWidth={2}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              )}\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Environment Distribution */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 1 }}\n        >\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Server className=\"h-5 w-5\" />\n                Environment Distribution\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"h-64 bg-gray-100 dark:bg-gray-800 rounded animate-pulse\" />\n              ) : (\n                <div className=\"flex items-center justify-between\">\n                  <ResponsiveContainer width=\"60%\" height={200}>\n                    <PieChart>\n                      <Pie\n                        data={environmentDistribution}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        innerRadius={40}\n                        outerRadius={80}\n                        paddingAngle={5}\n                        dataKey=\"value\"\n                      >\n                        {environmentDistribution.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                    </PieChart>\n                  </ResponsiveContainer>\n                  \n                  <div className=\"flex-1 pl-6\">\n                    <div className=\"space-y-3\">\n                      {environmentDistribution.map((item) => (\n                        <div key={item.name} className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            <div \n                              className=\"w-3 h-3 rounded-full\" \n                              style={{ backgroundColor: item.color }}\n                            />\n                            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                              {item.name}\n                            </span>\n                          </div>\n                          <div className=\"text-right\">\n                            <span className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n                              {item.value}%\n                            </span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n\n      {/* System Health Status */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 1.2 }}\n      >\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-5 w-5\" />\n              System Health Status\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3, 4].map((i) => (\n                  <div key={i} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n                      <div className=\"space-y-2\">\n                        <div className=\"h-4 w-24 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n                        <div className=\"h-3 w-32 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n                      </div>\n                    </div>\n                    <div className=\"w-16 h-6 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                {[\n                  { name: 'API Servers', status: 'healthy', uptime: 99.9, icon: Server },\n                  { name: 'Database', status: 'healthy', uptime: 99.8, icon: Database },\n                  { name: 'MCP Servers', status: 'warning', uptime: 97.5, icon: Terminal },\n                  { name: 'Sync Service', status: 'healthy', uptime: 99.7, icon: GitBranch }\n                ].map((service) => {\n                  const IconComponent = service.icon;\n                  return (\n                    <div \n                      key={service.name} \n                      className=\"flex items-center justify-between p-4 border border-gray-200 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors\"\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`p-2 rounded-lg ${\n                          service.status === 'healthy' \n                            ? 'bg-green-100 text-green-600 dark:bg-green-900/20 dark:text-green-400'\n                            : 'bg-yellow-100 text-yellow-600 dark:bg-yellow-900/20 dark:text-yellow-400'\n                        }`}>\n                          <IconComponent className=\"h-4 w-4\" />\n                        </div>\n                        <div>\n                          <div className=\"font-medium text-gray-900 dark:text-white\">\n                            {service.name}\n                          </div>\n                          <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                            Uptime: {service.uptime}%\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <Badge \n                        variant={service.status === 'healthy' ? 'default' : 'secondary'}\n                        className={service.status === 'healthy' \n                          ? 'bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-400'\n                          : 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/20 dark:text-yellow-400'\n                        }\n                      >\n                        {service.status === 'healthy' ? 'Healthy' : 'Warning'}\n                      </Badge>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}"