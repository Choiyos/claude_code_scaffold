'use client';\n\nimport { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { AnalyticsDashboard } from '@/components/analytics-dashboard';\nimport { MetricsOverview } from '@/components/metrics-overview';\nimport { UsageInsights } from '@/components/usage-insights';\nimport { PerformanceMonitoring } from '@/components/performance-monitoring';\nimport { TeamProductivity } from '@/components/team-productivity';\nimport { CustomReports } from '@/components/custom-reports';\nimport { RealTimeMonitor } from '@/components/real-time-monitor';\nimport { AlertsPanel } from '@/components/alerts-panel';\nimport { ExportTools } from '@/components/export-tools';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  BarChart3,\n  Activity,\n  Users,\n  Zap,\n  TrendingUp,\n  Download,\n  Settings,\n  Bell,\n  RefreshCw,\n  Calendar,\n  Filter,\n  Search\n} from 'lucide-react';\nimport { useAnalytics } from '@/lib/analytics-context';\n\ntype TimeRange = '1h' | '24h' | '7d' | '30d' | '90d';\n\nconst timeRangeOptions = [\n  { value: '1h', label: 'Last Hour' },\n  { value: '24h', label: 'Last 24 Hours' },\n  { value: '7d', label: 'Last 7 Days' },\n  { value: '30d', label: 'Last 30 Days' },\n  { value: '90d', label: 'Last 90 Days' }\n];\n\nconst tabConfig = [\n  {\n    value: 'overview',\n    label: 'Overview',\n    icon: BarChart3,\n    description: 'System-wide metrics and KPIs'\n  },\n  {\n    value: 'usage',\n    label: 'Usage Insights',\n    icon: Activity,\n    description: 'Environment usage patterns and trends'\n  },\n  {\n    value: 'performance',\n    label: 'Performance',\n    icon: Zap,\n    description: 'System performance and optimization metrics'\n  },\n  {\n    value: 'team',\n    label: 'Team Productivity',\n    icon: Users,\n    description: 'Team collaboration and productivity metrics'\n  },\n  {\n    value: 'reports',\n    label: 'Custom Reports',\n    icon: TrendingUp,\n    description: 'Custom analytics and reporting tools'\n  }\n];\n\nexport default function AnalyticsPage() {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [timeRange, setTimeRange] = useState<TimeRange>('24h');\n  const [isRealTimeEnabled, setIsRealTimeEnabled] = useState(true);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  \n  const { \n    metrics, \n    isLoading, \n    error, \n    refreshData, \n    connectionStatus,\n    alerts\n  } = useAnalytics(timeRange);\n\n  // Auto-refresh data every 30 seconds when real-time is enabled\n  useEffect(() => {\n    if (!isRealTimeEnabled) return;\n    \n    const interval = setInterval(() => {\n      refreshData();\n      setLastUpdated(new Date());\n    }, 30000);\n    \n    return () => clearInterval(interval);\n  }, [isRealTimeEnabled, refreshData]);\n\n  const handleTimeRangeChange = (newRange: TimeRange) => {\n    setTimeRange(newRange);\n    refreshData();\n  };\n\n  const handleRefresh = () => {\n    refreshData();\n    setLastUpdated(new Date());\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-purple-50 dark:from-slate-900 dark:via-blue-900 dark:to-purple-900\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6 mb-8\">\n          <div>\n            <motion.h1 \n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"text-4xl font-bold text-gray-900 dark:text-white mb-2\"\n            >\n              Analytics & Monitoring\n            </motion.h1>\n            <motion.p \n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.1 }}\n              className=\"text-lg text-gray-600 dark:text-gray-300\"\n            >\n              Comprehensive insights into your Claude development environments\n            </motion.p>\n          </div>\n\n          <motion.div \n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"flex items-center gap-4\"\n          >\n            {/* Connection Status */}\n            <div className=\"flex items-center gap-2\">\n              <div className={`w-2 h-2 rounded-full ${\n                connectionStatus === 'connected' ? 'bg-green-500 animate-pulse' : 'bg-red-500'\n              }`} />\n              <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                {connectionStatus === 'connected' ? 'Live' : 'Offline'}\n              </span>\n            </div>\n\n            {/* Real-time Toggle */}\n            <Button\n              variant={isRealTimeEnabled ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => setIsRealTimeEnabled(!isRealTimeEnabled)}\n              className=\"gap-2\"\n            >\n              <Activity className=\"h-4 w-4\" />\n              Real-time\n            </Button>\n\n            {/* Refresh Button */}\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleRefresh}\n              disabled={isLoading}\n              className=\"gap-2\"\n            >\n              <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n\n            {/* Export Tools */}\n            <ExportTools timeRange={timeRange} metrics={metrics} />\n          </motion.div>\n        </div>\n\n        {/* Time Range Selector */}\n        <motion.div \n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.3 }}\n          className=\"flex flex-wrap items-center gap-4 mb-8\"\n        >\n          <div className=\"flex items-center gap-2\">\n            <Calendar className=\"h-4 w-4 text-gray-500\" />\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n              Time Range:\n            </span>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            {timeRangeOptions.map((option) => (\n              <Button\n                key={option.value}\n                variant={timeRange === option.value ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => handleTimeRangeChange(option.value as TimeRange)}\n                className=\"h-8\"\n              >\n                {option.label}\n              </Button>\n            ))}\n          </div>\n          \n          <div className=\"ml-auto text-sm text-gray-500 dark:text-gray-400\">\n            Last updated: {lastUpdated.toLocaleTimeString()}\n          </div>\n        </motion.div>\n\n        {/* Alerts Panel */}\n        {alerts && alerts.length > 0 && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.4 }}\n            className=\"mb-8\"\n          >\n            <AlertsPanel alerts={alerts} />\n          </motion.div>\n        )}\n\n        {/* Real-time Monitor */}\n        {isRealTimeEnabled && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.5 }}\n            className=\"mb-8\"\n          >\n            <RealTimeMonitor />\n          </motion.div>\n        )}\n\n        {/* Main Content */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6 }}\n        >\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n            {/* Tab Navigation */}\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-2 shadow-sm border\">\n              <TabsList className=\"grid w-full grid-cols-2 lg:grid-cols-5 gap-1\">\n                {tabConfig.map((tab) => {\n                  const IconComponent = tab.icon;\n                  return (\n                    <TabsTrigger\n                      key={tab.value}\n                      value={tab.value}\n                      className=\"flex items-center gap-2 px-4 py-2 text-sm font-medium transition-all data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\"\n                    >\n                      <IconComponent className=\"h-4 w-4\" />\n                      <span className=\"hidden sm:inline\">{tab.label}</span>\n                    </TabsTrigger>\n                  );\n                })}\n              </TabsList>\n            </div>\n\n            {/* Tab Content */}\n            <div className=\"space-y-6\">\n              <TabsContent value=\"overview\" className=\"space-y-6\">\n                <MetricsOverview \n                  metrics={metrics} \n                  timeRange={timeRange} \n                  isLoading={isLoading}\n                />\n                <AnalyticsDashboard \n                  metrics={metrics} \n                  timeRange={timeRange} \n                  isLoading={isLoading}\n                />\n              </TabsContent>\n\n              <TabsContent value=\"usage\" className=\"space-y-6\">\n                <UsageInsights \n                  metrics={metrics} \n                  timeRange={timeRange} \n                  isLoading={isLoading}\n                />\n              </TabsContent>\n\n              <TabsContent value=\"performance\" className=\"space-y-6\">\n                <PerformanceMonitoring \n                  metrics={metrics} \n                  timeRange={timeRange} \n                  isLoading={isLoading}\n                />\n              </TabsContent>\n\n              <TabsContent value=\"team\" className=\"space-y-6\">\n                <TeamProductivity \n                  metrics={metrics} \n                  timeRange={timeRange} \n                  isLoading={isLoading}\n                />\n              </TabsContent>\n\n              <TabsContent value=\"reports\" className=\"space-y-6\">\n                <CustomReports \n                  metrics={metrics} \n                  timeRange={timeRange} \n                  isLoading={isLoading}\n                />\n              </TabsContent>\n            </div>\n          </Tabs>\n        </motion.div>\n\n        {/* Footer */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 1 }}\n          className=\"mt-12 pt-8 border-t border-gray-200 dark:border-gray-700\"\n        >\n          <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4 text-sm text-gray-500 dark:text-gray-400\">\n            <div className=\"flex items-center gap-4\">\n              <span>© 2024 Claude Environment Analytics</span>\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                v1.0.0\n              </Badge>\n            </div>\n            \n            <div className=\"flex items-center gap-4\">\n              <span>Data retention: 90 days</span>\n              <span>•</span>\n              <span>Updates every 30 seconds</span>\n              <span>•</span>\n              <a \n                href=\"/analytics/privacy\" \n                className=\"hover:text-gray-700 dark:hover:text-gray-300 transition-colors\"\n              >\n                Privacy Policy\n              </a>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}"